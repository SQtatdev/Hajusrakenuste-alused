from flask import Flask, jsonify, request
import json #"libary" kommenteerimine

app = Flask(__name__) #Flaski rakenduse loomine

@app.route('/')
def index():
    try:
        with open('LE.txt', 'r', encoding='ISO-8859-1') as file:
            data = file.read()

        # Return the content in plain text (this will not affect the JSON output)
        return f"<pre>{data}</pre>"

    except FileNotFoundError:
        return "File not found. Make sure LE.txt exists in the same directory."
        # See töödeldab taotlusi. Proovib avada faili LE.txt. Kui fail ei leidnud, siis tagastab veateate.

@app.route('/json/spare-parts', methods=['GET'])
def file_to_json():
    try:
        
        with open('LE.txt', 'r', encoding='ISO-8859-1') as file:
            # loeb faili
            lines = file.readlines()

        # Võtab väjla pealkirjad
        headers = ["sn", "name", "Column3", "Column4", "Column5", "Column6", "Column7", "Column8", "price", "brand", "Column11"]

        json_data = []

        # Loeb faili rida rea kaupa
        for line in lines:
            values = line.strip().split("\t")  # Jagab iga rida TAB-i abil
            if len(values) == len(headers):
                # Eemaldab jutumärgid väärtustest
                values = [value.strip('"') for value in values]

                row_dict = dict(zip(headers, values)) # Loob sõnastiku, kus võtmed on headers ja väärtused on values
                json_data.append(row_dict)

        # Saab päringu parameetrid
        filter_name = request.args.get('name')
        filter_sn = request.args.get('sn')

        # Filtreerib andmeid vastavalt päringu parameetritele
        if filter_name:
            json_data = [item for item in json_data if filter_name.lower() in item['name'].lower()]

        if filter_sn:
            json_data = [item for item in json_data if filter_sn in item['sn']]

        # Converteerib sõnastiku JSON-iks
        json_string = json.dumps(json_data, indent=4)

        # Tagastab JSON-i
        return f"<pre>{json_string}</pre>"

    except FileNotFoundError:
        return "File not found. Make sure LE.txt exists in the same directory."
    except Exception as e:
        return f"Error processing the file: {str(e)}"

if __name__ == '__main__':
    app.run(debug=True)
    # Panen tööle selle rakenduse


















link:http://127.0.0.1:5000/json/spare-parts?name=polt
